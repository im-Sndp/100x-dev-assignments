/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require('express');
const bodyParser = require('body-parser');
const cors = require('cors')
const port = 3000
const app = express();
app.use(cors());

app.use(bodyParser.json());

var id = 0;
var todoList = [];

function getTodo(req,res){
  res.status(200).send(todoList);
}

function getTodoById(req,res){
  var id = req.params.id;
  var found = false;
  var resultObject;

  for(var i = 0 ; i < todoList.length ; i++){
    if(todoList[i].id == id){
      resultObject = todoList[i];
      found = true;
    }
  }

  if(found){
    return res.status(200).send(resultObject);
  }
  else{
    return res.status(404).send("Not Found")
  }
}

function todos(req,res){
  id+=1;
  var todoObject = {
    "id" : id,
    "title" : req.body.title,
    "completed" : req.body.completed,
    "description" : req.body.description
  }
  todoList.push(todoObject)
  return res.status(201).send({"id":id})
}

function updateTodo(req,res){
  var id = req.params.id;
  var index;
  var found = false;

  for(var i = 0 ; i < todoList.length ; i++){
    if(todoList[i].id == id){
      index = i ;
      found = true ;
    }
  }

  if (found){
    todoList[index].title = req.body.title;
    todoList[index].completed = req.body.completed;
    return res.status(200).send("Ok")
  }
  else{
    return res.status(404).send("Not Found")
  }
}

function deleteTodo(req,res){
  var id = req.params.id;
  var index;
  var found = false;

  for(var i = 0 ; i < todoList.length ; i++){
    if(todoList[i].id == id){
      found = true;
      index = i;
    }
  }

  if (found){
    todoList.splice(index,1);
    return res.status(200).send("OK")
  }
  else{
    return res.status(404).send("Not Found")
  }

}

app.get('/todos',getTodo)
app.get('/todos/:id',getTodoById)
app.post('/todos',todos)
app.put('/todos/:id',updateTodo)
app.delete('/todos/:id',deleteTodo)

app.use((req,res,next)=>{
  res.status(404).send("Not Found")
})

// module.exports = app;
app.listen(3000,()=>{
  console.log(`Server started at port 3000`)
})